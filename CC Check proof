fn main() {
    // ...

    let num_reveals = (signedWeight / provenWeight).log2() as usize;
    let mut T: Vec<Option<TEntry>> = vec![None; sig_triples.len()];
    for j in 0..num_reveals {
        let Hinj = (j as u64, Rootsigs, provenWeight, M, Cattestors);
        let coinj = HashsignedWeight(&Hinj);
        let ij = IntToInd(&coinj, &sig_triples);
        if T[ij].is_none() {
            let s = sig_triples[ij];
            let pi_s = MerkleProof::generate(&sig_triples, ij);
            let p = attestors[ij];
            let pi_p = ComProve(&attestors, ij);
            T[ij] = Some(TEntry { s, pi_s, p, pi_p });
        }
    }

    // Generate the ZoKrates proof and verify it using the verifying key
    let zk_proof = generate_zk_proof(&M, &provenWeight, &Cattestors, &compact_cert, &sig_triples, &T);
    let vk = load_verifying_key();
    let is_valid = verify_zk_proof(&zk_proof, &vk, &M, &provenWeight, &Cattestors, &compact_cert, &sig_triples, &T);

    // Output the result
    if is_valid {
        println!("The compact certificate is valid!");
    } else {
        println!("The compact certificate is not valid.");
    }
}
